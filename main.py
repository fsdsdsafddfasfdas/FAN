import asyncio
import logging
import json
import os
from datetime import datetime, timedelta
import threading
import time
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "FunPay Steam Bot is running!"

@app.route('/ping')
def ping():
    return "pong"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
PORT = int(os.getenv('PORT', 8000))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
funpay_token = None
active_rentals = {}
accounts_data = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
def load_accounts():
    global accounts_data
    try:
        with open('accounts.json', 'r', encoding='utf-8') as f:
            accounts_data = json.load(f)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª accounts.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        accounts_data = []

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üéÆ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ü§ñ *FunPay Steam Bot*\n\n"
        "–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—Ä–µ–Ω–¥—ã Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def set_funpay_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_funpay_token <—Ç–æ–∫–µ–Ω>")
        return
    
    global funpay_token
    funpay_token = context.args[0]
    await update.message.reply_text("‚úÖ FunPay —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üéÆ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts_data)}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {len(active_rentals)}
üü¢ FunPay —Ç–æ–∫–µ–Ω: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if funpay_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
        """
        await query.edit_message_text(stats_text, parse_mode='Markdown')
    
    elif query.data == "accounts":
        if not accounts_data:
            await query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        accounts_text = "üéÆ *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n\n"
        for i, acc in enumerate(accounts_data[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status = "üîÑ –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω" if acc.get('login') in active_rentals else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
            accounts_text += f"{i+1}. {acc.get('login', 'N/A')} - {status}\n"
        
        if len(accounts_data) > 5:
            accounts_text += f"\n... –∏ –µ—â–µ {len(accounts_data) - 5} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        await query.edit_message_text(accounts_text, parse_mode='Markdown')
    
    elif query.data == "settings":
        settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîë FunPay —Ç–æ–∫–µ–Ω: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if funpay_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üë§ –ê–¥–º–∏–Ω ID: {ADMIN_ID}
üåê –ü–æ—Ä—Ç: {PORT}

–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/set_funpay_token <—Ç–æ–∫–µ–Ω>
        """
        await query.edit_message_text(settings_text, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FunPay
def monitor_funpay():
    while True:
        try:
            if funpay_token:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FunPay
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FunPay –∞–∫—Ç–∏–≤–µ–Ω")
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FunPay: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
def run_flask():
    app.run(host='0.0.0.0', port=PORT)

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    load_accounts()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_funpay_token", set_funpay_token))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FunPay –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_funpay, daemon=True)
    monitor_thread.start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    if ADMIN_ID == 0:
        logger.error("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    asyncio.run(main())
